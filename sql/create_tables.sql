create type roles as enum('ADMIN', 'MANAGER', 'COURIER', 'CLIENT');
create type statuses as enum('Created', 'Approving', 'Delivering', 'Delivered to pickup point', 'Completed', 'Cancelled');

create table phones (
    id integer generated by default as identity primary key,
    model varchar(30) not null,
    brand varchar(15) not null,
    stock integer not null
);

create table points (
    id integer generated by default as identity primary key,
    city varchar(30) not null,
    street varchar(50) not null,
    building varchar(15) not null,
    apartment varchar(15) not null
);

create table users (
    id integer generated by default as identity primary key,
    email varchar(100) not null,
    login varchar(30) not null,
    password varchar(1024) not null,
    surname varchar(100) default null,
    name varchar(100) default null,
    contact varchar(100) default null,
    role roles default 'CLIENT',
    point_id integer references points(id) default null,
    created_at timestamptz default now()
);

create table orders (
    id integer generated by default as identity primary key,
    user_id integer references users(id),
    manager_id integer references users(id),
    courier_id integer references users(id),
    point_id integer references points(id),
    phone_id integer references phones(id),
    quantity integer not null,
    status statuses default 'Created',
    created_at timestamptz default now(),
    modified_at timestamptz default now()
);

create or replace function get_random_integer_between(low integer, high bigint)
    returns int as
$$
begin
    return floor(random() * (high - low + 1) + low);
end;
$$ language 'plpgsql' strict;

create or replace function proceed_order() returns trigger
    language plpgsql
as $BODY$
    DECLARE
        current_quantity integer;
        random_id bigint;
    BEGIN
    IF tg_op = 'INSERT' THEN
        BEGIN
            select stock into current_quantity from phones where phones.id = new.phone_id;
            IF current_quantity > new.quantity THEN
                BEGIN
                    update phones set stock = stock - new.quantity where phones.id = new.phone_id;
                    NEW.status = 'Approving';
                    NEW.manager_id = (with random_manager as
                        (
                            select id from users where role = 'MANAGER' order by random() limit 1
                        ) select random_manager.id from random_manager);
                end;
            end if;
            IF new.point_id IS NULL THEN
                new.point_id = get_random_integer_between(1, (select count(*) from points));
            end if;
        END;
    ELSIF tg_op = 'UPDATE' THEN
        BEGIN
            NEW."modified_at" = now();
            IF new.status = 'Delivering' THEN
                BEGIN
                    select id into random_id from users where role = 'COURIER' order by random() limit 1;
                    new.courier_id = random_id;
                end;
            end if;
            IF new.status = 'Cancelled' THEN
                update phones set stock = stock + old.quantity where phones.id = old.phone_id;
            end if;
        END;
    END IF;
    RETURN NEW;
END
$BODY$;

create trigger update_order_info
    before insert or update
    on orders
    for each row
execute procedure proceed_order();

INSERT INTO points (city, street, building, apartment) VALUES ('Moscow', 'Moscow', '1', '1');

INSERT INTO users (email, login, password, contact, surname, name, point_id, role)
VALUES ('NikitaMesnyankin@gmail.com', 'NikitaMesnyankin', '$2a$10$OgE/3epxsQJZlypQFiU30eRvbTQtwwdoPyeUTt7bqSwuYKkVxzzYq', '+79275700540', 'Mesnyankin', 'Nikita', 1, 'ADMIN');